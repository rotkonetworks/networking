# BIRD 2.x configuration for BKK08
# Generated: 2025-08-08T09:56:11Z
# Config hash: 7332b2cc5280ce9112142d5ce84c884c588a0f8b81c5b618924c0c555349e44f

#
# Router Identity and Constants
#
router id 10.155.255.8;

# AS Numbers
define LOCAL_AS = 142108;

# Public IPs
define PUBLIC_IP4 = 160.22.181.8;
define PUBLIC_IP6 = 2401:a860:1008::;

# Network Prefixes
define PUBLIC_NET4 = 160.22.181.8/32;
define PUBLIC_NET6 = 2401:a860:1008::/128;
define INTERNAL_NET4 = 10.8.0.0/16;
define INTERNAL_NET6 = 2401:a860:1008::/48;

# Anycast IPv4 addresses (/32)
define ANYCAST_LOCAL_V4 = 160.22.181.81/32;
define ANYCAST_GLOBAL_V4 = 160.22.180.180/32;

# Anycast IPv6 host addresses (/128 - for loopback)
define ANYCAST_LOCAL_V6_HOST = 2401:a860:1081::/128;
define ANYCAST_GLOBAL_V6_HOST = 2401:a860::/128;

# Anycast IPv6 network prefixes (/48 - for BGP announcement)
define ANYCAST_LOCAL_V6_PREFIX = 2401:a860:1081::/48;
define ANYCAST_GLOBAL_V6_PREFIX = 2401:a860::/36;

# Route Reflector IPs
define RR1_IP4 = 10.155.108.0;
define RR2_IP4 = 10.155.208.0;
define RR1_IP6 = fd00:155:108::;
define RR2_IP6 = fd00:155:208::;

# Local IPs for BGP sessions
define LOCAL_IP4_RR1 = 10.155.108.1;
define LOCAL_IP6_RR1 = fd00:155:108::1;
define LOCAL_IP4_RR2 = 10.155.208.1;
define LOCAL_IP6_RR2 = fd00:155:208::1;

# BGP Preferences
define PREF_IPV6 = 200;
define PREF_IPV4 = 150;
define LOCAL_PREF_PRIMARY = 100;
define LOCAL_PREF_BACKUP = 90;

# Timers
define BGP_HOLD_TIME = 30;
define BGP_KEEPALIVE = 10;
define BFD_MIN_RX = 100;
define BFD_MIN_TX = 100;
define BFD_MULTIPLIER = 3;
define SCAN_TIME = 10;

#
# Logging Configuration
#
log syslog all;
log "/var/log/bird.log" all;

timeformat base iso long;
timeformat log iso long;
timeformat protocol iso long;
timeformat route iso long;

#
# BGP Templates
#
template bgp BGP_COMMON {
    local as LOCAL_AS;
    # Direct connection over vmbr2
    direct;

    # Faster convergence
    hold time BGP_HOLD_TIME;
    keepalive time BGP_KEEPALIVE;

    # BFD for fast failure detection
    bfd on;

    # Graceful restart
    graceful restart on;
    graceful restart time 120;
}

#
# Kernel Protocols
#
protocol kernel kernel4 {
    ipv4 {
        export filter {
            # Don't export kernel routes back
            if source = RTS_DEVICE then reject;
            if source = RTS_STATIC then reject;
            accept;
        };
        import all;
    };
    learn;
    scan time SCAN_TIME;
    merge paths on;
}

protocol kernel kernel6 {
    ipv6 {
        export filter {
            if source = RTS_DEVICE then reject;
            if source = RTS_STATIC then reject;
            accept;
        };
        import all;
    };
    learn;
    scan time SCAN_TIME;
    merge paths on;
}

#
# Basic Protocols
#
protocol device {
    scan time SCAN_TIME;
}

protocol direct {
    ipv4;
    ipv6;
    interface "vmbr*", "lo", "vmbr2";
}

#
# Static Routes
#
protocol static static4 {
    ipv4;
    route PUBLIC_NET4 unreachable;
    route 160.22.181.81/32 unreachable;
    route 160.22.180.180/32 unreachable;
    route INTERNAL_NET4 unreachable;
}

protocol static static6 {
    ipv6;
    route PUBLIC_NET6 unreachable;
    # Local anycast - host /128 for internal use
    route 2401:a860:1081::/128 unreachable;
    # Local anycast - /48 prefix for BGP announcement
    route 2401:a860:1081::/48 unreachable;
    # Global anycast - host /128 for internal use
    route 2401:a860::/128 unreachable;
    # Global anycast - /48 prefix for BGP announcement
    route 2401:a860::/36 unreachable;
    route INTERNAL_NET6 unreachable;
}

#
# BFD Protocol
#
protocol bfd {
    interface "vmbr2" {
        min rx interval BFD_MIN_RX ms;
        min tx interval BFD_MIN_TX ms;
        multiplier BFD_MULTIPLIER;
    };
}

#
# BGP Sessions to Route Reflectors
#

protocol bgp RR1_v6 from BGP_COMMON {
    description "Route Reflector - bkk00 IPv6";
    neighbor RR1_IP6 as LOCAL_AS;
    source address LOCAL_IP6_RR1;

    ipv6 {
        next hop self;
        import filter {
            # Prefer IPv6 routes
            preference = PREF_IPV6;

            # Accept default route
            if net = ::/0 then {
                bgp_local_pref = LOCAL_PREF_PRIMARY;
                accept;
            }

            # Accept all other routes
            accept;
        };
        export filter {
            # Export our networks
            if net = PUBLIC_NET6 then accept;
             # Export anycast /48 prefixes (NOT /128 hosts)
            # Anycast prefixes - announce /48 to meet MANRS requirements
            if net = ANYCAST_LOCAL_V6_PREFIX then accept;
            if net = ANYCAST_GLOBAL_V6_PREFIX then accept;

    # Internal networks
            if net ~ INTERNAL_NET6 then accept;

            # Don't export learned routes or /128 anycast hosts
            reject;
        };
    };
}

protocol bgp RR1_v4 from BGP_COMMON {
    description "Route Reflector - bkk00 IPv4";
    neighbor RR1_IP4 as LOCAL_AS;
    source address LOCAL_IP4_RR1;

    ipv4 {
        next hop self;
        import filter {
            # Lower preference for IPv4
            preference = PREF_IPV4;

            # Accept default
            if net = 0.0.0.0/0 then {
                bgp_local_pref = LOCAL_PREF_BACKUP;
                accept;
            }
            accept;
        };
        export filter {
            if net = PUBLIC_NET4 then accept;
            # Anycast /32 addresses
            if net = ANYCAST_LOCAL_V4 then accept;
            if net = ANYCAST_GLOBAL_V4 then accept;
            if net ~ INTERNAL_NET4 then accept;
            reject;
        };
    };
}

protocol bgp RR2_v6 from BGP_COMMON {
    description "Route Reflector - bkk20 IPv6";
    neighbor RR2_IP6 as LOCAL_AS;
    source address LOCAL_IP6_RR2;

    ipv6 {
        next hop self;
        import filter {
            # Prefer IPv6 routes
            preference = PREF_IPV6;

            # Accept default route
            if net = ::/0 then {
                bgp_local_pref = LOCAL_PREF_PRIMARY;
                accept;
            }

            # Accept all other routes
            accept;
        };
        export filter {
            # Export our networks
            if net = PUBLIC_NET6 then accept;
             # Export anycast /48 prefixes (NOT /128 hosts)
            # Anycast prefixes - announce /48 to meet MANRS requirements
            if net = ANYCAST_LOCAL_V6_PREFIX then accept;
            if net = ANYCAST_GLOBAL_V6_PREFIX then accept;

    # Internal networks
            if net ~ INTERNAL_NET6 then accept;

            # Don't export learned routes or /128 anycast hosts
            reject;
        };
    };
}

protocol bgp RR2_v4 from BGP_COMMON {
    description "Route Reflector - bkk20 IPv4";
    neighbor RR2_IP4 as LOCAL_AS;
    source address LOCAL_IP4_RR2;

    ipv4 {
        next hop self;
        import filter {
            # Lower preference for IPv4
            preference = PREF_IPV4;

            # Accept default
            if net = 0.0.0.0/0 then {
                bgp_local_pref = LOCAL_PREF_BACKUP;
                accept;
            }
            accept;
        };
        export filter {
            if net = PUBLIC_NET4 then accept;
            # Anycast /32 addresses
            if net = ANYCAST_LOCAL_V4 then accept;
            if net = ANYCAST_GLOBAL_V4 then accept;
            if net ~ INTERNAL_NET4 then accept;
            reject;
        };
    };
}
