name: Network Config Export
on:
  schedule:
    - cron: "0 7 * * *"
  workflow_dispatch:
jobs:
  export:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Export router configs
        env:
          BKK00_KEY: ${{ secrets.BKK00_SSH_KEY }}
          BKK10_KEY: ${{ secrets.BKK10_SSH_KEY }}
          BKK20_KEY: ${{ secrets.BKK20_SSH_KEY }}
          BKK30_KEY: ${{ secrets.BKK30_SSH_KEY }}
          BKK40_KEY: ${{ secrets.BKK40_SSH_KEY }}
          BKK50_KEY: ${{ secrets.BKK50_SSH_KEY }}
          BKK60_KEY: ${{ secrets.BKK60_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          # Write SSH keys
          for i in 00 10 20 30 40 50 60; do
            key_var="BKK${i}_KEY"
            echo "${!key_var}" > ~/.ssh/bkk${i}
            chmod 600 ~/.ssh/bkk${i}
          done
          # jg: ensure backup/mikrotik directory exists
          mkdir -p backup/mikrotik
          for i in 00 10 20 30 40 50 60; do
            temp_file=$(mktemp)
            if ssh -i ~/.ssh/bkk${i} -o StrictHostKeyChecking=no -o ConnectTimeout=10 bkk${i}@pj.rotko.net '/export' > "$temp_file" 2>/dev/null; then
              # jg: only update if non-empty and different
              if [ -s "$temp_file" ] && ! cmp -s "$temp_file" "backup/mikrotik/bkk${i}.rsc"; then
                mv "$temp_file" "backup/mikrotik/bkk${i}.rsc"
              else
                rm -f "$temp_file"
              fi
            else
              echo "Failed: bkk${i}"
              rm -f "$temp_file"
            fi
          done
      - name: Export interface configs
        env:
          INTERFACE_KEY: ${{ secrets.INTERFACE_SSH_KEY }}
        run: |
          echo "$INTERFACE_KEY" > ~/.ssh/interface_key
          chmod 600 ~/.ssh/interface_key
          mkdir -p backup/interfaces
          # Map nodes to ports
          declare -A ports
          ports[bkk01]=22781
          ports[bkk02]=22782
          ports[bkk03]=22783
          ports[bkk04]=22784
          ports[bkk06]=22786
          ports[bkk07]=22787
          ports[bkk08]=22788
          ports[bkk09]=22789
          ports[bkk11]=22801
          ports[bkk13]=22803
          for node in "${!ports[@]}"; do
            temp_file=$(mktemp)
            if ssh -i ~/.ssh/interface_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 -p ${ports[$node]} root@160.22.181.181 'cat /etc/network/interfaces' > "$temp_file" 2>/dev/null; then
              if [ -s "$temp_file" ] && ! cmp -s "$temp_file" "backup/interfaces/${node}.conf"; then
                mv "$temp_file" "backup/interfaces/${node}.conf"
              else
                rm -f "$temp_file"
              fi
            else
              echo "Failed: ${node}"
              rm -f "$temp_file"
            fi
          done
      - name: Export BGP and firewall configs
        env:
          INTERFACE_KEY: ${{ secrets.INTERFACE_SSH_KEY }}
        run: |
          mkdir -p backup/bird backup/nftables
          # jg: redeclare ports array in this step
          declare -A ports
          ports[bkk06]=22786
          ports[bkk07]=22787
          ports[bkk08]=22788

          for node in bkk06 bkk07 bkk08; do
            port=${ports[$node]}

            # bird config
            temp_file=$(mktemp)
            if ssh -i ~/.ssh/interface_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 -p $port root@160.22.181.181 'cat /etc/bird/bird.conf' > "$temp_file" 2>/dev/null; then
              if [ -s "$temp_file" ] && ! cmp -s "$temp_file" "backup/bird/${node}.conf"; then
                mv "$temp_file" "backup/bird/${node}.conf"
              else
                rm -f "$temp_file"
              fi
            else
              echo "Failed bird config: ${node}"
              rm -f "$temp_file"
            fi

            # nftables config
            temp_file=$(mktemp)
            if ssh -i ~/.ssh/interface_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 -p $port root@160.22.181.181 'nft list ruleset' > "$temp_file" 2>/dev/null; then
              if [ -s "$temp_file" ] && ! cmp -s "$temp_file" "backup/nftables/${node}.nft"; then
                mv "$temp_file" "backup/nftables/${node}.nft"
              else
                rm -f "$temp_file"
              fi
            else
              echo "Failed nftables config: ${node}"
              rm -f "$temp_file"
            fi
          done
      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add backup/
          git diff --cached --quiet || git commit -m "Config export $(date -u +%Y-%m-%d)"
          git push
