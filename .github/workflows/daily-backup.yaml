name: Network Config Export
on:
  schedule:
    - cron: "0 7 * * *"
  workflow_dispatch:
jobs:
  export:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - name: Export router configs
        env:
          BKK00_KEY: ${{ secrets.BKK00_SSH_KEY }}
          BKK10_KEY: ${{ secrets.BKK10_SSH_KEY }}
          BKK20_KEY: ${{ secrets.BKK20_SSH_KEY }}
          BKK30_KEY: ${{ secrets.BKK30_SSH_KEY }}
          BKK40_KEY: ${{ secrets.BKK40_SSH_KEY }}
          BKK50_KEY: ${{ secrets.BKK50_SSH_KEY }}
          BKK60_KEY: ${{ secrets.BKK60_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          # Write SSH keys
          for i in 00 10 20 30 40 50 60; do
            key_var="BKK${i}_KEY"
            echo "${!key_var}" > ~/.ssh/bkk${i}
            chmod 600 ~/.ssh/bkk${i}
          done
          # jg: ensure backup/mikrotik directory exists
          mkdir -p backup/mikrotik

          # function to backup a single router
          backup_router() {
            local i=$1
            local temp_file=$(mktemp)
            echo "Backing up bkk${i}..."
            if timeout 30s ssh -i ~/.ssh/bkk${i} -o StrictHostKeyChecking=no -o ConnectTimeout=10 bkk${i}@pj.rotko.net '/export' > "$temp_file" 2>/dev/null; then
              # jg: only update if non-empty and different
              if [ -s "$temp_file" ] && ! cmp -s "$temp_file" "backup/mikrotik/bkk${i}.rsc"; then
                mv "$temp_file" "backup/mikrotik/bkk${i}.rsc"
                echo "Updated: bkk${i}"
              else
                rm -f "$temp_file"
                echo "No changes: bkk${i}"
              fi
            else
              exit_code=$?
              if [ $exit_code -eq 124 ]; then
                echo "Timeout (30s): bkk${i}"
              else
                echo "Failed: bkk${i}"
              fi
              rm -f "$temp_file"
            fi
            
            # binary backup
            echo "Backing up bkk${i} binary..."
            if timeout 60s ssh -i ~/.ssh/bkk${i} -o StrictHostKeyChecking=no -o ConnectTimeout=10 bkk${i}@pj.rotko.net backup 2>/dev/null; then
              echo "Binary backup completed: bkk${i}"
            else
              echo "Failed to create binary backup: bkk${i}"
            fi
            # echo "Backing up bkk${i} binary..."
            # if timeout 30s ssh -i ~/.ssh/bkk${i} -o StrictHostKeyChecking=no -o ConnectTimeout=10 bkk${i}@pj.rotko.net '/system/backup/save name=temp-backup' 2>/dev/null; then
            #   temp_backup=$(mktemp)
            #   if timeout 30s scp -i ~/.ssh/bkk${i} -o StrictHostKeyChecking=no -o ConnectTimeout=10 bkk${i}@pj.rotko.net:temp-backup.backup "$temp_backup" 2>/dev/null; then
            #     if [ -s "$temp_backup" ] && ! cmp -s "$temp_backup" "backup/mikrotik/bkk${i}.backup"; then
            #       mv "$temp_backup" "backup/mikrotik/bkk${i}.backup"
            #       echo "Updated binary: bkk${i}"
            #     else
            #       rm -f "$temp_backup"
            #       echo "No changes binary: bkk${i}"
            #     fi
            #     # cleanup remote file
            #     if ! ssh -i ~/.ssh/bkk${i} -o StrictHostKeyChecking=no -o ConnectTimeout=10 bkk${i}@pj.rotko.net '/file remove temp-backup.backup' 2>/dev/null; then
            #       echo "Warning: Failed to cleanup remote backup file on bkk${i}"
            #     fi
            #   else
            #     echo "Failed to download binary: bkk${i}"
            #     rm -f "$temp_backup"
            #   fi
            # else
            #   echo "Failed to create binary backup: bkk${i}"
            # fi
          }

          # run backups in parallel
          for i in 00 10 20 30 40 50 60; do
            backup_router $i &
          done

          # wait for all background jobs
          wait
          echo "All router backups completed"

      - name: Export interface configs
        env:
          INTERFACE_KEY: ${{ secrets.INTERFACE_SSH_KEY }}
        run: |
          echo "$INTERFACE_KEY" > ~/.ssh/interface_key
          chmod 600 ~/.ssh/interface_key
          mkdir -p backup/interfaces

          # function to backup interface config
          backup_interface() {
            local node=$1
            local port=$2
            local temp_file=$(mktemp)
            echo "Backing up interface config for ${node}..."
            if timeout 30s ssh -i ~/.ssh/interface_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 -p ${port} root@160.22.181.181 'cat /etc/network/interfaces' > "$temp_file" 2>/dev/null; then
              if [ -s "$temp_file" ] && ! cmp -s "$temp_file" "backup/interfaces/${node}.conf"; then
                mv "$temp_file" "backup/interfaces/${node}.conf"
                echo "Updated: ${node}"
              else
                rm -f "$temp_file"
                echo "No changes: ${node}"
              fi
            else
              exit_code=$?
              if [ $exit_code -eq 124 ]; then
                echo "Timeout (30s): ${node}"
              else
                echo "Failed: ${node}"
              fi
              rm -f "$temp_file"
            fi
          }

          # run all interface backups in parallel
          backup_interface bkk01 22781 &
          backup_interface bkk02 22782 &
          backup_interface bkk03 22783 &
          backup_interface bkk04 22784 &
          backup_interface bkk06 22786 &
          backup_interface bkk07 22787 &
          backup_interface bkk08 22788 &
          backup_interface bkk09 22789 &
          backup_interface bkk11 22801 &
          backup_interface bkk13 22803 &

          wait
          echo "All interface backups completed"

      - name: Export BGP and firewall configs
        env:
          INTERFACE_KEY: ${{ secrets.INTERFACE_SSH_KEY }}
        run: |
          mkdir -p backup/bird backup/nftables

          # function to backup bird and nftables configs
          backup_bgp_firewall() {
            local node=$1
            local port=$2
            
            # bird config
            local temp_file=$(mktemp)
            echo "Backing up bird config for ${node}..."
            if timeout 30s ssh -i ~/.ssh/interface_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 -p $port root@160.22.181.181 'cat /etc/bird/bird.conf' > "$temp_file" 2>/dev/null; then
              if [ -s "$temp_file" ] && ! cmp -s "$temp_file" "backup/bird/${node}.conf"; then
                mv "$temp_file" "backup/bird/${node}.conf"
                echo "Updated bird: ${node}"
              else
                rm -f "$temp_file"
                echo "No changes bird: ${node}"
              fi
            else
              exit_code=$?
              if [ $exit_code -eq 124 ]; then
                echo "Timeout (30s) bird config: ${node}"
              else
                echo "Failed bird config: ${node}"
              fi
              rm -f "$temp_file"
            fi

            # nftables config
            temp_file=$(mktemp)
            echo "Backing up nftables config for ${node}..."
            if timeout 30s ssh -i ~/.ssh/interface_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 -p $port root@160.22.181.181 'nft list ruleset' > "$temp_file" 2>/dev/null; then
              if [ -s "$temp_file" ] && ! cmp -s "$temp_file" "backup/nftables/${node}.nft"; then
                mv "$temp_file" "backup/nftables/${node}.nft"
                echo "Updated nftables: ${node}"
              else
                rm -f "$temp_file"
                echo "No changes nftables: ${node}"
              fi
            else
              exit_code=$?
              if [ $exit_code -eq 124 ]; then
                echo "Timeout (30s) nftables config: ${node}"
              else
                echo "Failed nftables config: ${node}"
              fi
              rm -f "$temp_file"
            fi
          }

          # run all bgp/firewall backups in parallel
          backup_bgp_firewall bkk06 22786 &
          backup_bgp_firewall bkk07 22787 &
          backup_bgp_firewall bkk08 22788 &

          wait
          echo "All BGP and firewall backups completed"

      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add backup/
          git diff --cached --quiet || git commit -m "Config export $(date -u +%Y-%m-%d)"
          git push --force-with-lease
